<!-- 在 JavaScript 中，浅复制是一种复制对象的方法，它创建了目标对象的一个新副本，并将原始对象的属性值复制到新对象中。浅复制仅复制对象的引用，而不是对象本身。

当进行浅复制时，如果对象的属性值是基本数据类型（如数字、字符串、布尔值等），那么新对象会得到一个完全独立的属性副本。但是，如果对象的属性值是引用类型（如对象、数组、函数等），那么新对象的属性将引用原始对象的相同属性值。

让我们通过一个示例来说明浅复制的概念：

```javascript
var obj1 = {
  name: "John",
  age: 30,
  hobbies: ["reading", "music"]
};

// 进行浅复制
var obj2 = Object.assign({}, obj1);

// 修改 obj2 的属性值
obj2.name = "Jane";
obj2.hobbies.push("sports");

console.log(obj1);  // 输出: { name: "John", age: 30, hobbies: ["reading", "music", "sports"] }
console.log(obj2);  // 输出: { name: "Jane", age: 30, hobbies: ["reading", "music", "sports"] }
```

在这个例子中，我们使用 `Object.assign()` 方法进行了浅复制。`obj1` 是原始对象，`obj2` 是它的副本。当我们修改 `obj2` 的 `name` 属性时，它不会影响到 `obj1`，因为 `name` 是一个基本数据类型，新对象得到了一个独立的副本。然而，当我们修改 `obj2` 的 `hobbies` 属性时，它会影响到 `obj1`，因为 `hobbies` 是一个数组，浅复制只复制了数组的引用，而不是创建一个新的数组。

浅复制的一个重要特点是，新对象和原始对象共享引用类型的属性。这意味着如果修改新对象的引用类型属性，原始对象也会受到影响，因为它们指向同一个内存位置。

如果需要创建一个完全独立的对象副本，包括引用类型的属性，就需要使用深复制技术，例如递归复制对象的所有属性。深复制会递归遍历对象的所有属性，并创建它们的副本，确保新对象与原始对象完全独立。 -->