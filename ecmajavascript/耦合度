耦合度（Coupling）是软件工程中用来描述模块或组件之间相互依赖关系的度量。它表示一个模块对其他模块的依赖程度或相互影响程度。

耦合度越低，模块之间的独立性越高，模块的修改和维护相对容易，代码的可重用性和可测试性也更好。相反，耦合度越高，模块之间的依赖关系越紧密，一处的修改可能会影响其他部分，导致代码的可维护性和灵活性降低。

在软件开发中，有几种不同类型的耦合度：

无耦合（No Coupling）：模块之间完全独立，彼此没有任何依赖关系。

低耦合（Loose Coupling）：模块之间有一定的依赖关系，但相互影响较小，修改一个模块不会对其他模块造成太大的影响。模块之间通过接口进行通信，接口定义清晰，模块的内部实现对其他模块隐藏。

中等耦合（Medium Coupling）：模块之间有一定的依赖关系，并且彼此的修改可能会引起一些相互影响。模块之间的接口可能相对复杂或依赖较多，但仍能保持一定程度的独立性。

高耦合（Tight Coupling）：模块之间的依赖关系非常紧密，彼此之间相互依赖且修改一个模块可能会导致多个模块的修改。模块之间直接访问和依赖彼此的内部实现细节，难以独立进行修改和测试。

降低耦合度是软件设计和架构的一个重要目标。通过合理的模块划分、定义清晰的接口、使用抽象和设计模式等方法，可以减少模块之间的耦合度，提高代码的可维护性、可测试性和可扩展性。